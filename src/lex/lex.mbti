package moonbitlang/minimbt/lex

// Values
fn lex_string(String) -> Array[(Token, Loc, Loc)]!LexError

// Types and methods
pub type! LexError LexError_

pub enum LexError_ {
  UnexpectedChar(Char, Loc)
}
impl LexError_ {
  to_string(Self) -> String
}

type LexState

pub struct Loc {
  pub row : Int
  pub col : Int
  pub index : Int
}
impl Loc {
  to_string(Self) -> String
}

pub enum Token {
  ID(String)
  COLON
  ASSIGN
  SEMICOL
  FN
  LPAREN
  RPAREN
  ARROW
  COMMA
  LBRACE
  RBRACE
  EQ
  LE
  ADD
  SUB
  MUL
  DIV
  IF
  ELSE
  LBKT
  RBKT
  BOOL(Bool)
  DOT
  ARRAY
  UNIT_T
  BOOL_T
  DOUBLE_T
  I32(Int)
  F64(Double)
  NOT
  INT_T
  LET
  EOF
}
impl Token {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

// Type aliases

// Traits

// Extension Methods
impl Show for LexError_

impl Show for Loc

impl Show for Token

