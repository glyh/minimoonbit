package moonbitlang/minimbt/closure

alias @moonbitlang/minimbt as @minimbt
alias @moonbitlang/minimbt/knf as @knf

// Values
fn knf_program_to_closure(@knf.Knf, Map[String, @minimbt.Type]) -> Program

// Types and methods
pub struct Closure {
  pub name : Label
  pub actual_free_vars : Array[@minimbt.Name]
}
impl Closure {
  from_json(Json) -> Self!
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub enum Expr {
  Unit
  Int(Int)
  Double(Double)
  Neg(@minimbt.Name)
  Add(@minimbt.Name, @minimbt.Name)
  Sub(@minimbt.Name, @minimbt.Name)
  Mul(@minimbt.Name, @minimbt.Name)
  Div(@minimbt.Name, @minimbt.Name)
  FNeg(@minimbt.Name)
  FAdd(@minimbt.Name, @minimbt.Name)
  FSub(@minimbt.Name, @minimbt.Name)
  FMul(@minimbt.Name, @minimbt.Name)
  FDiv(@minimbt.Name, @minimbt.Name)
  IfEq(@minimbt.Name, @minimbt.Name, Expr, Expr)
  IfLe(@minimbt.Name, @minimbt.Name, Expr, Expr)
  Let((@minimbt.Name, LowType), Expr, Expr)
  Var(@minimbt.Name)
  MakeClosure((@minimbt.Name, LowType), Closure, Expr)
  CallClosure(@minimbt.Name, Array[@minimbt.Name])
  CallDirect(Label, Array[@minimbt.Name])
  MakeTuple(Array[@minimbt.Name])
  LetTuple(Array[(@minimbt.Name, LowType)], @minimbt.Name, Expr)
  ArrayGet(@minimbt.Name, @minimbt.Name)
  ArrayPut(@minimbt.Name, @minimbt.Name, @minimbt.Name)
  ExternalArray(Label)
}
impl Expr {
  from_json(Json) -> Self!
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub struct FuncDef {
  pub name : Label
  pub old_name : @minimbt.Name
  pub is_closure : Bool
  pub ty : LowType
  pub args : Array[(@minimbt.Name, LowType)]
  pub formal_free_vars : Array[(@minimbt.Name, LowType)]
  pub body : Expr
}
impl FuncDef {
  from_json(Json) -> Self!
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub type Label String
impl Label {
  to_string(Self) -> String
}

pub enum LowType {
  Unit
  Bool
  Int
  Double
  ClosureFn(Array[LowType], LowType)
  DirectFn(Array[LowType], LowType)
  Tuple(Array[LowType])
  Array(LowType)
  Ptr
}
impl LowType {
  from_json(Json) -> Self!
  is_float_like(Self) -> Bool
  is_ptr_like(Self) -> Bool
  size_of(Self, Int) -> Int
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub struct Program {
  pub fundefs : Array[FuncDef]
  pub body : Expr
}
impl Program {
  from_json(Json) -> Self!
  to_json(Self) -> Json
  to_string(Self) -> String
}

// Type aliases
pub typealias LocalEnv = @moonbitlang/core/immut/hashmap.T[@minimbt.Name, LowType]

pub typealias Name = @minimbt.Name

pub typealias Type = @minimbt.Type

// Traits

// Extension Methods
impl Show for Closure

impl Show for Expr

impl Show for FuncDef

impl Show for Label

impl Show for LowType

impl Show for Program

