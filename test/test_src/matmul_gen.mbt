
fn matshow(m: Int, n: Int, mat: Array[Array[Double]]) -> Unit {
  fn loop1(i: Int) -> Unit {
    if i <= m - 1 {
      fn loop2(j: Int) -> Unit {
        if j <= n - 1 {
          let _ = print_int(truncate(mat[i][j]));
          let _ = print_char(32);
          loop2(j+1)
        } else {
          print_endline()
        }
      }; 
      let _ = loop2(0);
      loop1(i+1)
    } else {
      ()
    }
  }; 
  loop1(0)
};

fn matmul(l: Int, m: Int, n: Int, a: Array[Array[Double]], b: Array[Array[Double]], c: Array[Array[Double]]) -> Unit {
  fn loop1(i: Int) -> Unit {
    if 0 <= i {
      fn loop2(j: Int) -> Unit {
        if 0 <= j {
          fn loop3(k: Int) -> Unit {
            if 0 <= k {
              c[i][j] = c[i][j] + a[i][k] * b[k][j];
              loop3(k - 1)
            } else {
              ()
            }
          };
          let _ = loop3(m - 1);
          loop2(j - 1)
        } else {
          ()
        }
      };
      let _ = loop2(n - 1);
      loop1(i - 1)
    } else {
      ()
    }
  };
  loop1(l - 1)
};

fn main {
  let dummy = Array::make(0, 0.0);
  fn gen_arr(m: Int, n: Int) -> Array[Array[Double]] {
    let mat = Array::make(m, dummy);
    fn init_arr(i: Int) -> Unit {
      if 0 <= i {
        mat[i] = Array::make(n, 0.0);
        init_arr(i - 1)
      } else {
        ()
      }
    };
    let _ = init_arr(m - 1);
    mat
  };

  let a = gen_arr(10, 8);
  let b = gen_arr(8, 9);
  let c = gen_arr(10, 9);

  a[0][0] = 1.4100013074133078; a[0][1] = 0.7963262000647642; a[0][2] = 3.5288700760789924; a[0][3] = 3.008033342059802; a[0][4] = 2.2284902937582327; a[0][5] = 2.903097055018172; a[0][6] = 4.805036791320593; a[0][7] = 1.0077388583058249;
  a[1][0] = 0.9428277638731908; a[1][1] = 4.571650241710553; a[1][2] = 2.4028676769372286; a[1][3] = 0.22951636220259086; a[1][4] = 4.095111239046104; a[1][5] = 3.457212815186472; a[1][6] = 1.6091555920365592; a[1][7] = 0.862366268736795;
  a[2][0] = 1.7512594439399014; a[2][1] = 3.818956682211634; a[2][2] = 4.631353663310701; a[2][3] = 0.2918351202852987; a[2][4] = 3.6303407893616964; a[2][5] = 2.1837434388046613; a[2][6] = 0.2367217127596155; a[2][7] = 4.163494256819772;
  a[3][0] = 2.5935293609511985; a[3][1] = 0.6137047851614952; a[3][2] = 2.4063167570136152; a[3][3] = 2.955140695761562; a[3][4] = 4.450416096625275; a[3][5] = 2.009950188618742; a[3][6] = 2.524930930714323; a[3][7] = 1.3918330016439606;
  a[4][0] = 3.3239190070690716; a[4][1] = 0.9597020710315407; a[4][2] = 3.6113034433100872; a[4][3] = 3.7600777249849053; a[4][4] = 2.797890401081711; a[4][5] = 3.9265058917098217; a[4][6] = 3.297323688501066; a[4][7] = 4.0958083805763765;
  a[5][0] = 1.1626731421382752; a[5][1] = 2.0535158153897486; a[5][2] = 4.348193262325604; a[5][3] = 1.5522125315350144; a[5][4] = 2.72104776437406; a[5][5] = 0.18740637385720293; a[5][6] = 2.9203033499207303; a[5][7] = 0.046900344731991006;
  a[6][0] = 4.626133947679837; a[6][1] = 0.0024363623258599754; a[6][2] = 4.99666489415492; a[6][3] = 4.361182825968638; a[6][4] = 2.1716741125719254; a[6][5] = 1.2017739382024755; a[6][6] = 4.660560157324894; a[6][7] = 4.312900291824652;
  a[7][0] = 2.87332279076359; a[7][1] = 0.15434651196997606; a[7][2] = 4.640270392897633; a[7][3] = 4.255440126732729; a[7][4] = 2.222913034328988; a[7][5] = 2.976678507843089; a[7][6] = 2.403839909581766; a[7][7] = 0.13085136695961896;
  a[8][0] = 3.6159802509743892; a[8][1] = 2.6661727717080916; a[8][2] = 0.35807721967829; a[8][3] = 2.2361777348458416; a[8][4] = 4.673151806713792; a[8][5] = 3.361387238601856; a[8][6] = 4.022308200626313; a[8][7] = 2.2830496844880264;
  a[9][0] = 4.41076380966569; a[9][1] = 2.4463298465216363; a[9][2] = 4.20989520417883; a[9][3] = 3.987057190761132; a[9][4] = 1.6766815539825197; a[9][5] = 3.4691471845277566; a[9][6] = 4.607327964754254; a[9][7] = 1.5444507199903723;

  b[0][0] = 4.910714347548266; b[0][1] = 3.522588708637478; b[0][2] = 3.9220045555510676; b[0][3] = 4.628331535026915; b[0][4] = 0.6146504901721156; b[0][5] = 0.2876061903892335; b[0][6] = 3.31612574761658; b[0][7] = 1.8631360235263865; b[0][8] = 4.8340628783267405;
  b[1][0] = 4.602739771242454; b[1][1] = 2.165917929367727; b[1][2] = 3.2824030022589823; b[1][3] = 0.21639596959424523; b[1][4] = 1.367634915657428; b[1][5] = 4.706114638118815; b[1][6] = 0.7278614601976741; b[1][7] = 3.5917534791174175; b[1][8] = 3.478607886582053;
  b[2][0] = 2.465769828609713; b[2][1] = 0.5366540998144165; b[2][2] = 2.9037171291481316; b[2][3] = 2.9991904190636705; b[2][4] = 2.7890479614803305; b[2][5] = 0.9546702518259986; b[2][6] = 3.5998217962648047; b[2][7] = 2.376757012206431; b[2][8] = 0.37191252833009725;
  b[3][0] = 0.13120618084962454; b[3][1] = 3.0181595170370272; b[3][2] = 1.379375278166095; b[3][3] = 1.8944968705259475; b[3][4] = 2.697707146994821; b[3][5] = 4.840045661193382; b[3][6] = 1.9234719010833745; b[3][7] = 1.0924150910423336; b[3][8] = 4.035919002952928;
  b[4][0] = 4.512018690779139; b[4][1] = 2.4865122419322643; b[4][2] = 0.5692248410127088; b[4][3] = 4.224707580385693; b[4][4] = 1.3594963844131736; b[4][5] = 2.414163428031582; b[4][6] = 1.3674452900966854; b[4][7] = 3.01527008445402; b[4][8] = 4.122559583003591;
  b[5][0] = 4.4244722406587815; b[5][1] = 3.26181175889603; b[5][2] = 2.056701305439334; b[5][3] = 4.220954793494537; b[5][4] = 4.154084509821978; b[5][5] = 2.391174228017695; b[5][6] = 2.2365919221499664; b[5][7] = 2.310105911017781; b[5][8] = 3.9121664601140123;
  b[6][0] = 3.4314256324345624; b[6][1] = 0.6548634820071625; b[6][2] = 4.051877206938853; b[6][3] = 0.8088882401076442; b[6][4] = 1.7417898496046185; b[6][5] = 1.9085293385237074; b[6][6] = 1.5401722638877513; b[6][7] = 1.4215824478757462; b[6][8] = 2.680369721556426;
  b[7][0] = 4.605574943314712; b[7][1] = 2.001512822174567; b[7][2] = 0.4744751500417743; b[7][3] = 2.5873562333684106; b[7][4] = 3.674795185549402; b[7][5] = 0.33632086234719805; b[7][6] = 0.21604479050621905; b[7][7] = 4.210382505777273; b[7][8] = 2.8601395502892824;

  let _ = matmul(10,8,9,a,b,c);
  matshow(10, 9, c)

};