fn no_ann() -> Unit {
  fn main() { fn lol(){ {fn wat(){()}; 1} }; 3 };
  fn a(u: Int, v: Int, w) -> Int {
    fn init() { () };
    fn wow(u, v, w, x, y, z) { 
      fn wow2(r, g, b, c, y, m, k) { k }; 1 };
    fn b(x: Bool, y, z: Bool) {
      ()
    }; 
    fn c(x: Bool, y, z: Bool) {
      ()
    }; fn g() { () };
    fn d(
      x: Bool,
      y: (Int, 
          (Int, (Bool) -> Int) 
          -> (Bool, Int, Int)
          -> Bool,
          (Int, Int, Bool)),
      z: Int)
    -> ((Unit) -> Int) -> Int {
      fn d(x: Bool, y: Int, z: Int) {
        let _ = not(not(not(x)));
        let _ = 3-----y <= y;
        let _ = y == y;
        let a = Array::make(10, 10);
        a[1] = 2;
        fn d() -> Unit {
          ()
        }; (d, d, d)
      }; 
      fn ret(q) {
        q()
      };
      ret
    }; ()
  }; { fn foo() { fn foo() { ({({1}, {(3, {fn foo(i){i}; 8 })})}) }; () }; () }
};

fn main { () };
fn init { () };

fn wat () -> Int {()};
